/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles
 * and allows public read access to classroom schedules, with write access restricted.
 * @data_structure
 * - User profiles are stored under `/users/{userId}`.
 * - Classroom schedules are stored under `/classrooms/{classroomId}`.
 * @key_security_decisions
 * - Users can only create their own profile.
 * - Users can only read and write to their own profile.
 * - Classroom schedules are publicly readable.
 * - Only authorized users can create, update, or delete classroom schedules. Authorization mechanism is TBD (TODO).
 * @denormalization_for_authorization
 *  - For user profiles, the `userId` is used as the document ID, which simplifies authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can read and modify their own profile if the userId matches their auth UID.
     * @deny (create) An unauthenticated user cannot create a profile.
     * @deny (get, update, delete) An authenticated user cannot read or modify another user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to classroom schedule documents.
     * @path /classrooms/{classroomId}
     * @allow (get, list) Any user can read classroom schedules.
     * @deny (create, update, delete) Only authorized users can modify classroom schedules (authorization mechanism TBD).
     * @principle Allows public read access to classroom schedules but restricts write access.
     */
    match /classrooms/{classroomId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation once roles are defined
    }
  }
}