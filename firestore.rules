/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles
 * and allows public read access with owner-only writes for classroom schedules.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile data. Access is restricted to the owner (the user with the matching userId).
 * - /classrooms/{classroomId}: Stores classroom schedules.  Readable by anyone, but only writable (create, update, delete) by the owner.
 *   The classroomId is derived from grade and class (e.g., '11-c').
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data. User listing is disallowed.
 * - Classroom schedules are publicly readable to facilitate shared access.
 * - Only the owner of a classroom schedule can modify it.
 *
 * Denormalization for Authorization:
 * - For classroom schedules, the 'lastUpdatedBy' field is used to determine ownership. It must match the authenticated user's UID on write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) User with matching userId can read their own profile.
     * @allow (create) User can create their own profile if the userId matches their auth UID.
     * @allow (update) User can update their own profile if the userId matches their auth UID.
     * @allow (delete) User can delete their own profile if the userId matches their auth UID.
     * @deny (get) User cannot read another user's profile.
     * @deny (create) User cannot create a profile with a userId that doesn't match their auth UID.
     * @deny (update) User cannot update another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Verify ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to classroom schedule documents.
     * @path /classrooms/{classroomId}
     * @allow (get) Anyone can read classroom schedules.
     * @allow (list) Anyone can list classroom schedules.
     * @allow (create) Only the authenticated user can create a classroom schedule, and their UID must match the 'lastUpdatedBy' field in the data.
     * @allow (update) Only the authenticated user who originally created the classroom schedule can update it.
     * @allow (delete) Only the authenticated user who originally created the classroom schedule can delete it.
     * @deny (create) If the 'lastUpdatedBy' field doesn't match the authenticated user's UID.
     * @deny (update) If the authenticated user is not the original creator of the classroom schedule.
     * @deny (delete) If the authenticated user is not the original creator of the classroom schedule.
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /classrooms/{classroomId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Verify ownership of existing document
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

       // Verify ownership of incoming document
      function isNewOwner() {
        return request.auth.uid == request.resource.data.lastUpdatedBy;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isNewOwner();
      allow update: if isSignedIn() && isOwner(resource.data.lastUpdatedBy) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.lastUpdatedBy) && resource != null;
    }
  }
}