/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to classroom schedules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.  Access is restricted to the user
 *   identified by userId.
 * - /classrooms/{classroomId}: Stores classroom schedules. Schedules are publicly
 *   readable, but write access is denied. The classroomId is a combination of grade
 *   and class, e.g., '11-c'.
 *
 * Key Security Decisions:
 * - User profiles are only accessible to the owning user.
 * - Classroom schedules are publicly readable to facilitate easy access.
 * - Write access to classroom schedules is denied for prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (read, create, update, delete) An authenticated user can only access their own profile.
     *   Example: A user with UID 'user123' can read, create, update, and delete the document at /users/user123.
     * @deny (read, create, update, delete) A user cannot access another user's profile.
     *   Example: A user with UID 'user123' cannot read, create, update, or delete the document at /users/user456.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Allows any signed-in user to read the document if the requested userId matches their own user ID.
      allow get: if isSignedIn() && isOwner(userId);
      // Allows any signed-in user to list the document if the requested userId matches their own user ID.
      allow list: if isSignedIn() && isOwner(userId);
      // Allows a signed-in user to create their own document if the requested userId matches their own user ID.
      allow create: if isSignedIn() && isOwner(userId);
      // Allows a signed-in user to update their own document if the requested userId matches their own user ID and the document exists.
      allow update: if isSignedIn() && isExistingOwner(userId);
      // Allows a signed-in user to delete their own document if the requested userId matches their own user ID and the document exists.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to classroom schedule documents.
     * @path /classrooms/{classId}
     * @allow (read) Allows any authenticated user to read classroom schedules.
     *   Example: A user with UID 'user123' can read the schedule at /classrooms/11-c.
     * @deny (create, update, delete) No user can modify classroom schedules.
     *   Example: Any attempt to create, update, or delete a document in /classrooms/{classId} will be denied.
     */
    match /classrooms/{classId} {
      // Allows any user to read classroom schedules.
      allow get, list: if true;
      // Denies all write operations on classroom schedules.
      allow create, update, delete: if false;
    }

    // Helper function to determine if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to determine if the user owns the resource.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to determine if the user owns the resource and the resource exists
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}