/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-ownership for user profiles
 * and allowing public read access to classroom schedules, while restricting write access to those.
 * It opts for simplicity and security over complex schema validation to enable rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Access is restricted to the owner (the user with matching userId).
 * - /classrooms/{classroomId}: Stores classroom schedules. Publicly readable, but only writeable to authorized users.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; listing all profiles is disallowed.
 * - Classroom schedules are publicly readable, allowing all clients to fetch them.
 * - No write access is granted.
 *
 * Denormalization for Authorization:
 *  - No denormalization is used in this ruleset. If write access were to be granted, consider adding an
 *    `ownerId` or `authorizedEditorIds` field to the classroom documents to simplify authorization rules
 *    and avoid costly `get()` calls.
 * Structural Segregation:
 * - Public data (classroom schedules) and private data (user profiles) are stored in separate top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile at /users/user_abc.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete their own profile at /users/user_abc.
     * @deny (create) User with UID 'user_abc' cannot create a profile at /users/user_xyz.
     * @deny (get, update, delete) User with UID 'user_abc' cannot read, update, or delete another user's profile at /users/user_xyz.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Allow a user to create their own profile if the userId matches their auth UID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      // Allow reading, updating, and deleting a profile only by the owner.
      allow get, update, delete: if isSignedIn() && isExistingOwner(userId);
      // No listing of all users.
      allow list: if false;
    }

    /**
     * @description Controls access to classroom schedule documents.
     * @path /classrooms/{classroomId}
     * @allow (get, list) Any user can read classroom schedules.
     * @deny (create, update, delete) No user can create, update, or delete classroom schedules (write permissions are disabled).
     * @principle Allows public read access to classroom schedules.
     */
    match /classrooms/{classroomId} {
      // Allow anyone to read classroom schedules.
      allow get, list: if true;
      // No one can create, update, or delete classroom schedules.
      allow create, update, delete: if false;
    }

    // --- Helper functions ---

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the requesting user is the owner of the document, based on the userId.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    //Check if the requesting user is the owner of an existing document
    function isExistingOwner(userId){
        return isOwner(userId) && resource != null;
    }
  }
}