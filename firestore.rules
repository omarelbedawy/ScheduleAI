/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows public read access to classroom schedules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /classrooms/{classroomId}: Stores classroom schedules, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profile data.
 * - Classroom schedules are publicly readable but writes are not allowed in this prototype.
 * - No user listing is allowed to prevent unauthorized data access.
 *
 * Denormalization for Authorization:
 *  - User profile documents are named with the userId, removing the need for additional fields for authorization.
 *
 * Structural Segregation:
 * - Private user data (profiles) is stored under /users/{userId}, while public data (classroom schedules) is stored in a top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3' can create their profile.
     *    - Request: auth.uid = 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3', resource.data.id = 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3'
     * @allow (get) - User 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3' can read their profile.
     *    - Request: auth.uid = 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3'
     * @allow (update) - User 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3' can update their profile.
     *    - Request: auth.uid = 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3'
     * @allow (delete) - User 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3' can delete their profile.
     *    - Request: auth.uid = 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3'
     * @deny (create) - User 'attackerUid' cannot create a profile for 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3'.
     *    - Request: auth.uid = 'attackerUid', resource.data.id = 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3'
     * @deny (get) - User 'attackerUid' cannot read the profile of 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3'.
     *    - Request: auth.uid = 'attackerUid'
     * @deny (update) - User 'attackerUid' cannot update the profile of 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3'.
     *    - Request: auth.uid = 'attackerUid'
     * @deny (delete) - User 'attackerUid' cannot delete the profile of 'vNpWx0cOjbZscfEQUmNQFw5t7FJ3'.
     *    - Request: auth.uid = 'attackerUid'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to classroom schedule documents.
     * @path /classrooms/{classroomId}
     * @allow (get) - Any user can read a classroom schedule.
     *    - Request: No auth required.
     * @allow (list) - Any user can list classroom schedules.
     *    - Request: No auth required.
     * @deny (create) - No one can create classroom schedules in this prototype.
     *    - Request: Any auth, any data.
     * @deny (update) - No one can update classroom schedules in this prototype.
     *    - Request: Any auth, any data.
     * @deny (delete) - No one can delete classroom schedules in this prototype.
     *    - Request: Any auth, any data.
     * @principle Allows public reads, restricts all writes.
     */
    match /classrooms/{classroomId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}