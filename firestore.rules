/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to classroom schedules.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Classroom schedules are stored under `/classrooms/{classroomId}`.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Classroom schedules are publicly readable but not writable via the client.
 *   Write operations to `/classrooms/{classroomId}` are denied. Backend triggers or
 *   Cloud Functions should be used to manage classroom schedule data.
 * - Listing of users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 *  -  N/A - Simple ownership model for user profiles based on `userId` in the path.
 *
 * Structural Segregation:
 *  -  Separate collections are used for user profiles (private) and classroom
 *     schedules (public read-only).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Authenticated user cannot create another user's profile if the ID doesn't match.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner of the user profile.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the request is made by the existing owner of the user profile.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to classroom schedule documents.
     * @path /classrooms/{classroomId}
     * @allow (get) Any user can read classroom schedule.
     * @allow (list) Any user can list classroom schedules.
     * @deny (create) No user can create classroom schedule via client (use backend).
     * @deny (update) No user can update classroom schedule via client (use backend).
     * @deny (delete) No user can delete classroom schedule via client (use backend).
     * @principle Allows public read access but restricts write access.
     */
    match /classrooms/{classroomId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}