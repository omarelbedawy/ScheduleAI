/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict user-ownership for user profiles and read-only access to classroom schedules.
 * It allows for rapid prototyping by focusing on authorization and bypassing data shape validation.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information. Access is restricted to the owning user.
 * - /classrooms/{classroomId}: Stores classroom schedules.  Read access is public to authenticated users; write access is disabled.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied (no `list` rule on `/users`).
 * - Classroom schedules are readable by any authenticated user, but not writable, reflecting their shared nature.
 *
 *  Denormalization for Authorization: N/A - Current rules do not require denormalization.
 *  Structural Segregation: N/A - Public/private data is separated by collection; no need for flags.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict user-ownership for profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their profile.
     * @allow (read, update, delete) - Authenticated user can read, update, and delete their own profile.
     * @deny (create, read, update, delete) - Any other user attempts to access this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow read, update, delete: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read classroom schedules. Writes are disabled.
     * @path /classrooms/{classroomId}
     * @allow (read) - Any authenticated user can read classroom schedules.
     * @deny (create, update, delete) - No one can modify classroom schedules.
     * @principle Provides public read access with restricted writes for shared data.
     */
    match /classrooms/{classroomId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}