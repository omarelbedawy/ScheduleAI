/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict user-ownership for user profiles and public read access for classroom schedules. Data shape validation is relaxed for rapid prototyping.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`.
 * - Classroom schedules are stored in `/classrooms/{classroomId}`.  The `classroomId` is a combination of grade and class, e.g., '11-c'.
 *
 * Key Security Decisions:
 * - User profiles are only readable and writable by the owning user.
 * - Classroom schedules are publicly readable but not writable by anyone in this prototype.
 * - No listing of users is allowed.
 *
 * Denormalization for Authorization: N/A in this simple prototype.
 * Structural Segregation: Private user data is stored separately from public classroom data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner read/write access to their user profile.
     * @path /users/{userId}
     * @allow (get) User 'DIuWwB8zGDhdHCN1qc2dKyXilaA2' can read their own profile.
     * @allow (create) User 'DIuWwB8zGDhdHCN1qc2dKyXilaA2' can create their own profile.
     * @allow (update) User 'DIuWwB8zGDhdHCN1qc2dKyXilaA2' can update their own profile.
     * @allow (delete) User 'DIuWwB8zGDhdHCN1qc2dKyXilaA2' can delete their own profile.
     * @deny (get) User 'DIuWwB8zGDhdHCN1qc2dKyXilaA3' cannot read user 'DIuWwB8zGDhdHCN1qc2dKyXilaA2' profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requesting user ID matches the document's user ID.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is an existing owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to classroom schedules, but no writes in this prototype.
     * @path /classrooms/{classroomId}
     * @allow (get) Any user can read a classroom schedule.
     * @allow (list) Any user can list classroom schedules.
     * @deny (create) No user can create a classroom schedule in this prototype.
     * @deny (update) No user can update a classroom schedule in this prototype.
     * @deny (delete) No user can delete a classroom schedule in this prototype.
     * @principle Grants public read, denies all writes.
     */
    match /classrooms/{classroomId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}