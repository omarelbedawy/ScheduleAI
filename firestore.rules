/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows any authenticated user to update classroom schedules.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile information for each user. Access is restricted to the owner.
 * - /classrooms/{classroomId}: Stores the shared schedule for a classroom. Any authenticated user can update these schedules.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and owned by the respective user.
 * - Any authenticated user can update classroom schedules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User 'testUser' with ID 'testUser' can create their own profile.
     * @allow (get, list) User 'testUser' with ID 'testUser' can read their own profile.
     * @allow (update, delete) User 'testUser' with ID 'testUser' can update/delete their own profile.
     * @deny (create) User 'anotherUser' with ID 'anotherUser' cannot create a profile for 'testUser'.
     * @deny (get, list) User 'anotherUser' with ID 'anotherUser' cannot read the 'testUser' profile.
     * @deny (update, delete) User 'anotherUser' with ID 'anotherUser' cannot update/delete the 'testUser' profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to classroom schedule documents.
     * @path /classrooms/{classroomId}
     * @allow (get, list) Any user can read the schedule.
     * @allow (update) Any authenticated user can update the schedule.
     * @deny (create) No one can create a classroom document (explicitly managed by backend).
     * @deny (delete) No one can delete a classroom document (explicitly managed by backend).
     * @principle Allows any signed-in user to read or update classroom schedules, but restricts creation and deletion.
     */
    match /classrooms/{classroomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if false;
      allow update: if isSignedIn() && resource != null;
      allow delete: if false;
    }
  }
}